module Main exposing (main)

import Array exposing (Array)
import Browser
import Html exposing (..)
import Html.Attributes as Attr exposing (..)
import Html.Events as Events exposing (onClick, onInput)


type Color
    = Black
    | White


type Piece
    = Pawn Color
    | Knight Color
    | Bishop Color
    | Rook Color
    | Queen Color
    | King Color
    | Empty

blacks : List Piece
blacks =
    [ Pawn Black, Knight Black, Rook Black, Bishop Black, Queen Black, King Black ]


whites : List Piece
whites =
    [ Pawn White, Knight White, Rook White, Bishop White, Queen White, King White ]


type alias Row =
    Array Piece


type alias Board =
    Array Row


type alias Cell =
    ( Int, Int )

type alias Move =
  { player: Color
  , start: Cell
  , end: Cell
  , piece: Piece
  , killedPiece: Piece}

type AvailableCells
    = NoAvailableCells
    | AvailCells (List Cell)


type CurrentCell
    = NoCell
    | CurCell Cell

type HistModel =
  HistModel Model

type alias Model =
    { board : Board
    , currentTurn : Color
    , currentCell : CurrentCell
    , lostPieces : Array Piece
    , availableCells : AvailableCells
    , moves : List Move
    , models : Array HistModel
    }


type Msg
    = Touch CurrentCell
    | MakeMove Cell
    | GoToTurn Int


initialModel : Model
initialModel =
    { board =
        Array.fromList
            [ Array.fromList [ Rook White, Knight White, Bishop White, Queen White, King White, Bishop White, Knight White, Rook White ]
            , Array.repeat 8 (Pawn White)
            , Array.repeat 8 Empty
            , Array.repeat 8 Empty
            , Array.repeat 8 Empty
            , Array.repeat 8 Empty
            , Array.repeat 8 (Pawn Black)
            , Array.fromList [ Rook Black, Knight Black, Bishop Black, Queen Black, King Black, Bishop Black, Knight Black, Rook Black ]
            ]
    , currentTurn = White
    , currentCell = NoCell
    , lostPieces = Array.empty
    , availableCells = NoAvailableCells
    , moves = []
    , models = Array.empty
    }


init : () -> ( Model, Cmd Msg )
init _ =
    ( initialModel
    , Cmd.none
    )


view : Model -> Html Msg
view model =
    div [ class "app" ]
        [ div [ class "first-container" ] [ span [] [ text "CHESS" ] ]
        , div [ class "second-container" ]
            [ viewHistory model
            , viewBoard model
            , viewDashboard model
            ]
        , viewMessage model
        ]


viewHistory : Model -> Html Msg
viewHistory model =
    div [ class "history" ]
        [ table []
            [ thead []
                [ tr []
                    [ th [ Attr.colspan 3, onClick (GoToTurn -1) ] [ text "Moves" ]
                    ]
                , tbody
                    []
                    (List.indexedMap viewMove model.moves)
                ]
            ]
        ]

viewMove : Int -> Move -> Html Msg
viewMove i move =
  tr [ onClick (GoToTurn i)] [
    td [] [ div [] [text (String.fromInt (i+1))]]
  , td [] [ div [] [text (textPiece move.piece)]]
  , td [] [ div [] [text ( textMoveCell move.start ++ " - " ++ textMoveCell move.end) ]]
    ]

textMoveCell : Cell -> String
textMoveCell (row, col) =
    let
        letters = Array.fromList ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
        letter =
          case Array.get row letters of
              Nothing ->
                '?'
              Just l ->
                l
    in
    String.fromChar letter ++ String.fromInt col

        
textPiece : Piece -> String
textPiece piece =
  case piece of
    Pawn _ ->
      "Pawn"
    Rook _ ->
      "Rook"
    Knight _ ->
      "Knight"
    Bishop _ ->
      "Bishop"
    King _ ->
      "King"
    Queen _ ->
      "Queen"
    Empty ->
      "????"


viewDashboard : Model -> Html Msg
viewDashboard model =
    div [ class "dashboard" ]
        [ div [ classList [ ( "player2", True ), ( "current-player", model.currentTurn == Black ) ] ] [ span [] [ text "Black" ] ]
        , div []
            [ div [ class "killedW" ] (viewLostPieces White model.lostPieces)
            , div [ class "killedB" ] (viewLostPieces Black model.lostPieces)
            ]
        , div [ classList [ ( "player1", True ), ( "current-player", model.currentTurn == White ) ] ] [ span [] [ text "White" ] ]
        ]


viewLostPieces : Color -> Array Piece -> List (Html Msg)
viewLostPieces color arr =
    case color of
        Black ->
            Array.filter (\p -> List.member p blacks) arr
                |> Array.toList
                |> List.map viewPiece

        White ->
            Array.filter (\p -> List.member p whites) arr
                |> Array.toList
                |> List.map viewPiece


viewMessage : Model -> Html Msg
viewMessage model =
    div [ class "message" ]
        [ span [] []
        ]


viewBoard : Model -> Html Msg
viewBoard model =
    div [ class "board" ]
        (model.board
            |> Array.indexedMap (viewRow model)
            |> Array.foldl List.append []
        )


viewRow : Model -> Int -> Row -> List (Html Msg)
viewRow model rowN row =
    row
        |> Array.indexedMap (viewCell model rowN)
        |> Array.toList


viewCell : Model -> Int -> Int -> Piece -> Html Msg
viewCell model rowN colN piece =
    div [ classList [ ( "cell", True ), ( "black", modBy 2 (rowN + colN) == 0 ), ( "selected", checkSelected model.currentCell rowN colN ), ( "attacted", checkAttacted model rowN colN ) ] ]
        [ if checkAvailable model.availableCells rowN colN then
            -- cell available and no piece branch
            if getPiece model.board ( rowN, colN ) == Empty then
                div [ class "empty", onClick (MakeMove ( rowN, colN )) ]
                    [ div [ class "available" ] []
                    ]

            else
                -- cell available and piece is here branch
                div [ onClick (MakeMove ( rowN, colN )) ] [ viewPieceWithAction model.currentTurn rowN colN piece ]

          else
            -- cell unavilable branch
            div [] [ viewPieceWithAction model.currentTurn rowN colN piece ]
        ]


checkAttacted : Model -> Int -> Int -> Bool
checkAttacted model row col =
    getPiece model.board ( row, col ) /= Empty && checkAvailable model.availableCells row col


checkAvailable : AvailableCells -> Int -> Int -> Bool
checkAvailable availableCells rowN colN =
    case availableCells of
        NoAvailableCells ->
            False

        AvailCells list ->
            List.member ( rowN, colN ) list


checkSelected : CurrentCell -> Int -> Int -> Bool
checkSelected currentCell rowN colN =
    case currentCell of
        CurCell ( row, col ) ->
            if row == rowN && col == colN then
                True

            else
                False

        NoCell ->
            False


viewPieceWithAction turn rowN colN piece =
    if List.member piece blacks then
        div [ clickOnRightTurn turn Black ( rowN, colN ) ] [ viewPiece piece ]

    else if List.member piece whites then
        div [ clickOnRightTurn turn White ( rowN, colN ) ] [ viewPiece piece ]

    else
        div [ class "empty", onClick (Touch NoCell) ] []


viewPiece : Piece -> Html Msg
viewPiece piece =
    case piece of
        Pawn Black ->
            img [ src "assets/black-pawn.png" ] []

        Pawn White ->
            img [ src "assets/white-pawn.png" ] []

        Knight Black ->
            img [ src "assets/black-knight.png" ] []

        Knight White ->
            img [ src "assets/white-knight.png" ] []

        Rook Black ->
            img [ src "assets/black-rook.png" ] []

        Rook White ->
            img [ src "assets/white-rook.png" ] []

        Bishop Black ->
            img [ src "assets/black-bishop.png" ] []

        Bishop White ->
            img [ src "assets/white-bishop.png" ] []

        Queen Black ->
            img [ src "assets/black-queen.png" ] []

        Queen White ->
            img [ src "assets/white-queen.png" ] []

        King Black ->
            img [ src "assets/black-king.png" ] []

        King White ->
            img [ src "assets/white-king.png" ] []

        Empty ->
            div [ class "empty" ] []


clickOnRightTurn : Color -> Color -> Cell -> Attribute Msg
clickOnRightTurn turnColor pieceColor cell =
    if turnColor == pieceColor then
        onClick (Touch (CurCell cell))

    else
        attribute "noClick" "nothing"



-- div [ onClick (Touch NoCell) ] []


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Touch (CurCell ( row, col )) ->
            ( { model | currentCell = CurCell ( row, col ), availableCells = getAvailableCells model ( row, col ) }, Cmd.none )

        Touch NoCell ->
            ( { model | currentCell = NoCell, availableCells = NoAvailableCells }, Cmd.none )

        GoToTurn i ->
          let
              newModel =
                case Array.get (i+1) model.models of
                  Nothing ->
                    model

                  Just (HistModel hstModel) ->
                    hstModel
          in
          ( newModel, Cmd.none)

        MakeMove cell ->
            case model.currentCell of
                NoCell ->
                    ( model, Cmd.none )

                CurCell ( startRow, startCol ) ->
                    let
                        ( endRow, endCol ) =
                            cell

                        pieceMoved = getPiece model.board ( startRow, startCol )

                        board1 =
                            case Array.get startRow model.board of
                                Nothing ->
                                    model.board

                                Just row ->
                                    Array.set startRow (Array.set startCol Empty row) model.board

                        board2 =
                            case Array.get endRow board1 of
                                Nothing ->
                                    model.board

                                Just row ->
                                    Array.set endRow (Array.set endCol pieceMoved row) board1

                        lostPiece =
                            case Array.get endRow board1 of
                                Nothing ->
                                    Empty

                                Just row ->
                                    case Array.get endCol row of
                                        Nothing ->
                                            Empty

                                        Just piece ->
                                            piece
                    in
                    ( { model
                        | board = board2
                        , currentCell = NoCell
                        , availableCells = NoAvailableCells
                        , currentTurn = changeTurn model.currentTurn
                        , lostPieces =
                            if lostPiece == Empty then
                                model.lostPieces

                            else
                                Array.push lostPiece model.lostPieces
                        , moves = List.append model.moves [{ player = model.currentTurn, start = (startRow, startCol), end = cell, piece = pieceMoved, killedPiece = lostPiece}]
                        , models = Array.push (HistModel {model | availableCells = NoAvailableCells, currentCell = NoCell}) model.models
                      }
                    , Cmd.none
                    )


changeTurn : Color -> Color
changeTurn color =
    case color of
        White ->
            Black

        Black ->
            White


getAvailableCells : Model -> Cell -> AvailableCells
getAvailableCells model cell =
    case getPiece model.board cell of
        Pawn color ->
            case color of
                White ->
                    if Tuple.first cell == 1 then
                        AvailCells [ Tuple.mapFirst ((+) 1) cell, Tuple.mapFirst ((+) 2) cell ]

                    else
                        AvailCells [ Tuple.mapFirst ((+) 1) cell ]

                Black ->
                    if Tuple.first cell == 6 then
                        AvailCells [ Tuple.mapFirst ((+) -1) cell, Tuple.mapFirst ((+) -2) cell ]

                    else
                        AvailCells [ Tuple.mapFirst ((+) -1) cell ]

        _ ->
            NoAvailableCells


getPiece : Board -> Cell -> Piece
getPiece board cell =
    case Array.get (Tuple.first cell) board of
        Just rowArray ->
            case Array.get (Tuple.second cell) rowArray of
                Just piece ->
                    piece

                Nothing ->
                    Empty

        Nothing ->
            Empty



-- TODO we can write it simplier


main : Program () Model Msg
main =
    Browser.element
        { init = init
        , view = view
        , update = update
        , subscriptions = \_ -> Sub.none
        }
